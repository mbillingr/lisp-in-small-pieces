(import (builtin core)
        (libs utils)
        (libs book))

(define (min-max-reference-impl tree)
  (define (first-number tree)
    (if (pair? tree)
        (first-number (car tree))
        tree))
  (let* ((min (first-number tree))
         (max min))
    (define (scan! tree)
      (cond ((pair? tree)
             (scan! (car tree))
             (scan! (cdr tree)))
            (else (if (> tree max)
                      (set! max tree)
                      (if (< tree min)
                          (set! min tree))))))
    (scan! tree)
    (list min max)))

(define (min-max tree)
  (if (pair? tree)
      (let ((l-min-max (min-max (car tree)))
            (r-min-max (min-max (cdr tree))))
        (let ((min (if (< (car l-min-max) (car r-min-max))
                       (car l-min-max)
                       (car r-min-max)))
              (max (if (> (cadr l-min-max) (cadr r-min-max))
                       (cadr l-min-max)
                       (cadr r-min-max))))
          (list min max)))
      (list tree tree)))

(println (min-max (cons (cons 3 (cons 1 5)) (cons (cons 6 7) (cons 7 (cons 8 8))))))
