(import (builtin core)
        (libs utils)
        (libs book)
        (06-fast-interpreter common))

(define (meaning e r)
  (if (atom? e)
      (if (symbol? e) (meaning-reference e r)
                      (meaning-quotation e r))
      (case (car e)
        ((quote)   (meaning-quotation (cadr e) r))
        ((lambda)  (meaning-abstraction (cadr e) (cddr e) r))
        ((if)      (meaning-alternative (cadr e) (caddr e) (cadddr e) r))
        ((begin)   (meaning-sequence (cdr e) r))
        ((set!)    (meaning-assignment (cadr e) (caddr e) r))
        (else      (meaning-application (car e) (cdr e) r)))))

(define (meaning-quotation v r)
  (lambda (sr k) (k v)))

(define (meaning-alternative e1 e2 e3 r)
  (let ((m1 (meaning e1 r))
        (m2 (meaning e2 r))
        (m3 (meaning e3 r)))
    (lambda (sr k)
      (m1 sr (lambda (v)
               ((if v m2 m3) sr k))))))

(define (meaning-sequence e+ r)
  (if (pair? e+)
      (if (pair? (cdr e+))
          (meaning*-multiple-sequence (car e+) (cdr e+) r)
          (meaning*-single-sequence (car e+) r))
      (static-wrong "Illegal syntax: (begin)")))

(define (meaning*-single-sequence e r)
  (meaning e r))

(define (meaning*-multiple-sequence e e+ r)
  (let ((m1 (meaning e r))
        (m+ (meaning-sequence e+ r)))
    (lambda (sr k)
      (m1 sr (lambda (v)
               (m+ sr k))))))

(define (meaning-regular-application e e* r)
  (let* ((m (meaning e r))
         (m* (meaning* e* r (length e*))))
    (lambda (sr k)
      (m sr (lambda (f)
              (if (procedure? f)
                  (m* sr (lambda (v*)
                           (f v* k)))
                  (wrong "Not a function")))))))

(define (meaning* e* r size)
  (if (pair? e*)
      (meaning-some-arguments (car e*) (cdr e*) r size)
      (meaning-no-argument r size)))

(define (meaning-no-argument r size)
  (let ((size+1 (+ size 1)))
    (lambda (sr k)
      (let ((v* (allocate-activation-frame size+1)))
        (k v*)))))

(define (meaning-some-arguments e e* r size)
  (let ((m (meaning e r))
        (m* (meaning* e* r size))
        (rank (- size (+ (length e*) 1))))
    (lambda (sr k)
      (m sr (lambda (v)
              (m* sr (lambda (v*)
                       (set-activation-frame-argument! v* rank v)
                       (k v*))))))))

(define (meaning-closed-application e ee* r)
  (let ((nn* (cadr e)))
    (define (parse n* e* regular)
      (cond ((pair? n*)
             (if (pair? e*)
                 (parse (cdr n*) (cdr e*) (cons (car n*) regular))
                 (static-wrong "Too few arguments" e ee*)))
            ((null? n*)
             (if (null? e*)
                 (meaning-fix-closed-application nn* (cddr e) ee* r)
                 (static-wrong "Too many arguments" e ee*)))
            (else (meaning-dotted-closed-application
                    (reverse regular) n* (cddr e) ee* r))))
    (parse nn* ee* '())))

(define (meaning-fix-closed-application n* body e* r)
  (let* ((m* (meaning* e* r (length e*)))
         (r2 (r-extend* r n*))
         (m+ (meaning-sequence body r2)))
    (lambda (sr k)
      (m* sr (lambda (v*)
               (m+ (sr-extend* sr v*) k))))))

(define (meaning-dotted-closed-application n* n body e* r)
  (let* ((m* (meaning-dotted* e* r (length e*) (length n*)))
         (r2 (r-extend* r (append n* (list n))))
         (m+ (meaning-sequence body r2)))
    (lambda (sr k)
      (m* sr (lambda (v*)
               (m+ (sr-extend* sr v*) k))))))

(define (meaning-dotted* e* r size arity)
  (if (pair? e*)
      (meaning-some-dotted-arguments (car e*) (cdr e*) r size arity)
      (meaning-no-dotted-argument r size arity)))

(define (meaning-some-dotted-arguments e e* r size arity)
  (let ((m (meaning e r))
        (m* (meaning-dotted* e* r size arity))
        (rank (- size (+ (length e*) 1))))
    (if (< rank arity)
        (lambda (sr k)
          (m sr (lambda (v)
                  (m* sr (lambda (v*)
                           (set-activation-frame-argument! v* rank v)
                           (k v*))))))
        (lambda (sr k)
          (m sr (lambda (v)
                  (m* sr (lambda (v*)
                           (set-activation-frame-argument!
                             v* arity
                             (cons v (activation-frame-argument v* arity)))
                           (k v*)))))))))

(define (meaning-no-dotted-argument r size arity)
  (let ((arity+1 (+ arity 1)))
    (lambda (sr k)
      (let ((v* (allocate-activation-frame arity+1)))
        (set-activation-frame-argument! v* arity '())
        (k v*)))))

(define (meaning-fix-abstraction n* e+ r)
  (let* ((arity (length n*))
         (arity+1 (+ arity 1))
         (r2 (r-extend* r n*))
         (m+ (meaning-sequence e+ r2)))
    (lambda (sr k)
      (k (lambda (v* k1)
           (if (= (activation-frame-argument-length v*) arity+1)
               (m+ (sr-extend* sr v*) k1)
               (wrong "Incorrect arity")))))))

(define (meaning-dotted-abstraction n* n e+ r)
  (let* ((arity (length n*))
         (arity+1 (+ arity 1))
         (r2 (r-extend* r (append n* (list n))))
         (m+ (meaning-sequence e+ r2)))
    (lambda (sr k)
      (k (lambda (v* k1)
           (if (>= (activation-frame-argument-length v*) arity+1)
               (begin (listify! v* arity)
                      (m+ (sr-extend* sr v*) k1))
               (wrong "Incorrect arity")))))))

(define (meaning-abstraction nn* e+ r)
  (define (parse n* regular)
    (cond ((pair? n*) (parse (cdr n*) (cons (car n*) regular)))
          ((null? n*) (meaning-fix-abstraction nn* e+ r))
          (else (meaning-dotted-abstraction (reverse regular) n* e+ r))))
  (parse nn* '()))

(define (meaning-reference n r)
  (let ((kind (compute-kind r n)))
    (if kind
        (case (car kind)
          ((local)
           (let ((i (cadr kind))
                 (j (cddr kind)))
             (if (= i 0)
                 (lambda (sr k) (k (activation-frame-argument sr j)))
                 (lambda (sr k) (k (deep-fetch sr i j))))))
          ((global)
           (let ((i (cdr kind)))
             (if (eq? (global-fetch i) undefined-value)
                 (lambda (sr k)
                   (let ((v (global-fetch i)))
                     (if (eq? v undefined-value)
                         (wrong "Uninitialized variable" n)
                         (k v))))
                 (lambda (sr k) (k (global-fetch i))))))
          ((predefined)
           (let* ((i (cdr kind))
                  (value (predefined-fetch i)))
             (lambda (sr k) (k value)))))
        (static-wrong "No such variable" n))))

(define (meaning-assignment n e r)
  (let ((m (meaning e r))
        (kind (compute-kind r n)))
    (if kind
        (case (car kind)
          ((local)
           (let ((i (cadr kind))
                 (j (cddr kind)))
             (if (= i 0)
                 (lambda (sr k)
                   (m sr (lambda (v)
                           (k (set-activation-frame-argument! sr j v)))))
                 (lambda (sr k)
                   (m sr (lambda (v) (k (deep-update! sr i j v))))))))
          ((global)
           (let ((i (cdr kind)))
             (lambda (sr k)
               (m sr (lambda (v) (k (global-update! i v)))))))
          ((predefined)
           (static-wrong "Immutable predefined variable" n)))
        (static-wrong "No such variable" n))))

(define (meaning-application e e* r)
  (cond
    ((and (symbol? e)
          (let ((kind (compute-kind r e)))
            (and (pair? kind)
                 (eq? 'predefined (car kind))
                 (let ((desc (get-description e)))
                   (and desc
                        (eq? 'function (car desc))
                        (if (= (length (cddr desc)) (length e*))
                            (meaning-primitive-application e e* r)
                            (static-wrong "Incorrect arity for" e))))))))
    ((and (pair? e)
          (eq? 'lambda (car e)))
     (meaning-closed-application e e* r))
    (else (meaning-regular-application e e* r))))

(define (meaning-primitive-application e e* r)
  (let* ((desc (get-description e)) ;desc = (function address . var-list)
         (address (cadr desc))
         (size (length e*)))
    (case size
      ((0) (lambda (sr k) (k (address))))
      ((1) (let ((m1 (meaning (car e*) r)))
             (lambda (sr k)
               (m1 sr (lambda (v) (k (address v)))))))
      ((2) (let ((m1 (meaning (car e*) r))
                 (m2 (meaning (cadr e*) r)))
             (lambda (sr k)
               (m1 sr (lambda (v1)
                        (m2 sr (lambda (v2) (k (address v1 v2)))))))))
      ((3) (let ((m1 (meaning (car e*) r))
                 (m2 (meaning (cadr e*) r))
                 (m3 (meaning (caddr e*) r)))
             (lambda (sr k)
               (m1 sr (lambda (v1)
                        (m2 sr (lambda (v2)
                                 (m3 sr (lambda (v3) (k (address v1 v2 v3)))))))))))
      (else (meaning-regular-application e e* r)))))

(define (defprimitive name value arity)
  (case arity
    ((0) (defprimitive0 name value))
    ((1) (defprimitive1 name value))
    ((2) (defprimitive2 name value))
    ((3) (defprimitive3 name value))
    (else static-wrong "Unsupported primitive arity" name arity)))

(define (defprimitive0 name value)
  (definitial name
    (let* ((arity+1 (+ 0 1))
           (behavior
             (lambda (v* k)
               (if (= (activation-frame-argument-length v*) arity+1)
                   (k (value))
                   (wrong "Incorrect arity" name)))))
      (description-extend!
        name `(function ,value))
      behavior)))

(define (defprimitive1 name value)
  (definitial name
    (let* ((arity+1 (+ 1 1))
           (behavior
             (lambda (v* k)
               (if (= (activation-frame-argument-length v*) arity+1)
                   (k (value (activation-frame-argument v* 0)))
                   (wrong "Incorrect arity" name)))))
      (description-extend!
        name `(function ,value a))
      behavior)))

(define (defprimitive2 name value)
  (definitial name
    (let* ((arity+1 (+ 2 1))
           (behavior
             (lambda (v* k)
               (if (= (activation-frame-argument-length v*) arity+1)
                   (k (value (activation-frame-argument v* 0)
                             (activation-frame-argument v* 1)))
                   (wrong "Incorrect arity" name)))))
      (description-extend!
        name `(function ,value a b))
      behavior)))

(define (defprimitive3 name value)
  (definitial name
    (let* ((arity+1 (+ 3 1))
           (behavior
             (lambda (v* k)
               (if (= (activation-frame-argument-length v*) arity+1)
                   (k (value (activation-frame-argument v* 0)
                             (activation-frame-argument v* 1)
                             (activation-frame-argument v* 2)))
                   (wrong "Incorrect arity" name)))))
      (description-extend!
        name `(function ,value a b c))
      behavior)))


(define (chapter61-interpreter)
  (define (compile e) (meaning e r.init))
  (define (run c) (c sr.init display))
  (define (toplevel)
    (run (compile (read)))
    (toplevel))
  (toplevel))


(definitial 't #t)
(definitial 'f #f)
(definitial 'nil '())
(defprimitive 'cons cons 2)
(defprimitive 'car car 1)
(defprimitive 'cdr cdr 1)
(defprimitive 'eq? eq? 2)
(defprimitive '= = 2)
(defprimitive '< < 2)
(defprimitive '<= <= 2)
(defprimitive '+ + 2)
(defprimitive '- - 2)
(defprimitive '* * 2)
(defprimitive '/ / 2)
(definitial 'call/cc
  (let* ((arity 1)
         (arity+1 (+ arity 1)))
    (lambda (v* k)
      (if (= arity+1 (activation-frame-argument-length v*))
          ((activation-frame-argument v* 0)
           (let ((frame (allocate-activation-frame (+ 1 1))))
             (set-activation-frame-argument!
               frame 0
               (lambda (values kk)
                 (if (= (activation-frame-argument-length values) arity+1)
                     (k (activation-frame-argument values 0))
                     (wrong "Incorrect arity" 'continuation))))
             frame)
           k)
          (wrong "Incorrect arity" 'call/cc)))))


(chapter61-interpreter)
