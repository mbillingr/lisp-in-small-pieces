(import (builtin core)
        (libs utils)
        (libs book))

(define (cps e)
  (if (atom? e)
      (lambda (k) (k `,e))
      (case (car e)
        ((begin)  (cps-begin (cdr e)))
        ((lambda) (cps-abstraction (cadr e) (caddr e)))
        (else     (cps-application e)))))

(define (cps-begin e)
  (if (pair? e)
      (if (pair? (cdr e))
          (let ((void (gensym "void")))
            (lambda (k)
              ((cps (car e))
               (lambda (b)
                 ((cps-begin (cdr e))
                  (lambda (a)
                    (k `((lambda (,void) ,b) ,a))))))))
          (cps (car e)))
      (cps '())))

(define (cps-application e)
  (lambda (k)
    ((cps-terms e)
     (lambda (t*)
       (let ((d (gensym)))
         `(,(car t*) (lambda (,d) ,(k d))
                     . ,(cdr t*)))))))

(define (cps-terms e*)
  (if (pair? e*)
      (lambda (k)
        ((cps (car e*))
         (lambda (a)
           ((cps-terms (cdr e*))
            (lambda (a*)
              (k (cons a a*)))))))
      (lambda (k) (k '()))))

(define (cps-abstraction variables body)
  (lambda (k)
    (k (let ((c (gensym "cont")))
         `(lambda (,c . ,variables)
            ,((cps body)
              (lambda (a) `(,c ,a))))))))


(define (call/cc k f) (f k k))
